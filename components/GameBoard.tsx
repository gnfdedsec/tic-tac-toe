"use client"

import { useEffect } from "react"
import { Square } from "@/components/Square"
import { Button } from "@/components/ui/button"
import { useToast } from "@/hooks/use-toast"
import { RotateCw } from "lucide-react"
import useGameStore from "@/store/gameStore"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"

export function GameBoard() {
  const { toast } = useToast()
  const {
    board,
    currentPlayer,
    winner,
    winningLine,
    score,
    streak,
    makeMove,
    resetGame,
  } = useGameStore()

  useEffect(() => {
    if (winner) {
      if (winner === "X") {
        if (streak % 3 === 0) { // ‡∏ó‡∏∏‡∏Å‡πÜ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (3, 6, 9, ...)
          toast({
            title: "üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞",
            description: `‡∏ä‡∏ô‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ${streak} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á! ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏û‡∏¥‡πÄ‡∏®‡∏© +1 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô üåü`,
          })
        } else if (streak % 3 === 2) { // ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (2, 5, 8, ...)
          toast({
            title: "üéâ ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!",
            description: `‡∏ä‡∏ô‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ${streak} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏≠‡∏µ‡∏Å 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™! üéØ`,
          })
        } else { // ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ
          toast({
            title: "üéâ ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏ô‡∏∞!",
            description: `‡∏ä‡∏ô‡∏∞‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ${streak} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`,
          })
        }
      } else if (winner === "O") {
        toast({
          title: "üòî ‡∏ö‡∏≠‡∏ó‡∏ä‡∏ô‡∏∞!",
          description: "‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏∞",
          variant: "destructive",
        })
      }
    } else if (board.every((square) => square !== null)) {
      toast({
        title: "ü§ù ‡πÄ‡∏™‡∏°‡∏≠!",
        description: "‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏∏‡∏Å‡∏°‡∏≤‡∏Å",
      })
    }
  }, [winner, board, streak, toast])

  return (
    <div className="flex flex-col gap-4">
      <Card className="w-full">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <h2 className="text-2xl font-bold">Score: {score}</h2>
            <Button
              variant="outline"
              onClick={resetGame}
              className="flex items-center gap-2 px-3 h-8"
            >
              <RotateCw className="h-4 w-4" /> 
              <span className="text-lg font-semibold text-gray-600">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏™‡πå‡πÉ‡∏´‡∏°‡πà</span>
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent className="flex flex-col items-center gap-8">
          <div className="grid grid-cols-3 gap-2">
            {board.map((value, index) => (
              <Square
                key={index}
                value={value}
                onClick={() => currentPlayer === "X" && makeMove(index)}
                isWinningSquare={winningLine?.includes(index)}
              />
            ))}
          </div>

          <p className="text-lg font-medium">
            {winner
              ? `Winner: ${winner}`
              : board.every((square) => square !== null)
              ? "Draw!"
              : `Current player: ${currentPlayer}`}
          </p>
        </CardContent>
      </Card>

      <Card className="w-full bg-gray-50">
        <CardHeader>
          <CardTitle className="text-xl"> ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô</CardTitle>
        </CardHeader>
        <CardContent className="space-y-2">
          <ul className="list-disc list-inside space-y-1">
            <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á X ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å</li>
            <li>‡∏ä‡∏ô‡∏∞: ‡πÑ‡∏î‡πâ 1 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</li>
            <li>‡πÅ‡∏û‡πâ: ‡πÄ‡∏™‡∏µ‡∏¢ 1 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</li>
            <li>‡∏ä‡∏ô‡∏∞ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô: ‡πÑ‡∏î‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™ 1 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  )
}
